generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String    @db.Text
  email     String    @db.Text
  servers   Server[]
  members   Member[]
  channels  Channel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique
  profileId  String

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  channels Channel[]
  members  Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  Admin
  Moderator
  Guest
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(Guest)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  chatsCreated Chat[] @relation("FirstChatMember")
  chatsJoined  Chat[] @relation("SecondChatMember")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id   String @id @default(uuid())
  body String @db.Text

  fileUrl String? @db.Text

  memberId  String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime?

  deleted Boolean @default(false)

  @@index([channelId])
  @@index([memberId])
}

model Chat {
  id String @id @default(uuid())

  firstMember   Member @relation("FirstChatMember", fields: [firstMemberId], references: [id])
  firstMemberId String

  secondMember   Member @relation("SecondChatMember", fields: [secondMemberId], references: [id])
  secondMemberId String

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([firstMemberId, secondMemberId])
  @@index([firstMemberId])
  @@index([secondMemberId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  body    String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([memberId])
  @@index([chatId])
}
